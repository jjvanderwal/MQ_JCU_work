###### INPUTS ######

SPP =
WKDIR =		# location of occurrence and background files
OCCUR =	
BKGND =		# absence or pseudo-absence flag?
TESTDIR =	# explicit test data?
CURRENTDIR = 	# current predictors
PROJECTIONDIR =	# future predictors
OUTDIR =	

EVALUATEMODELS = FALSE
PROJECTMODELS = FLASE


###### ALGORITHMS ######

BIOCLIM = FALSE
DOMAIN = FALSE
MAHAL = FALSE
MAXENT = FALSE
BRT = FALSE
GEODIST = FALSE
CONVEXHULLS = FALSE
CIRCLES = FALSE
GEOIDW = FALSE
VORONOI = FALSE


###### PRESENCE ONLY ######
###### BIOCLIM ######

x =	# Raster* object or matrix of numeric predictors
p =	# optional two column matrix or SpatialPoints* object (lon/lat) used to extract if x=Raster*

###### DOMAIN ######

x =	# Raster* object or matrix of numeric predictors
p =	# optional two column matrix or SpatialPoints* object (lon/lat) used to extract if x=Raster*

###### MAHAL ######

x =	# Raster* object or matrix of numeric predictors
p =	# optional two column matrix or SpatialPoints* object (lon/lat) used to extract if x=Raster*


###### PRESENCE / ABSENCE ######
###### MAXENT ######

x = 	# Raster* object or SpatialGridDataFrame with predictor grids or data.frame of values
p =	# data.frame, matrix, SpatialPoints* object (coordinates) or a vector (of PA if x=dataframe(
a = 	# background points; only used if 'p' is not missing and not a vector
factors =	# name or index of categorical factors
path = OUTDIR

Flag					Abbrv	Type		
responsecurves = FALSE			P	boolean		
pictures = TRUE					boolean		
jackknife = FALSE			J	boolean		
outputformat = "logistic"			string		
outputfiletype = "asc"				string		
outputdirectory	= OUTDIR		o	directory	
projectionlayers = PROJECTDIR		j	file/directory	
samplesfile = OCCUR			s	file	
environmentallayers = CURRENTDIR	e	file/directory	
randomseed = FALSE				boolean		
logscale = TRUE					boolean		
warnings = TRUE					boolean		
tooltips = TRUE					boolean		
askoverwrite = TRUE			r	boolean		
skipifexists = FALSE			S	boolean		
removeduplicates = TRUE				boolean		
writeclampgrid = TRUE				boolean		
writemess = TRUE				boolean		
randomtestpoints = 0			X	integer		
betamultiplier = 1			b	double		
maximumbackground = 10000		MB	integer		
biasfile = ""					file		
testsamplesfile = TESTDIR		T	file		
replicates = 1					integer		
replicatetype = "crossvalidate"			string		
perspeciesresults = FALSE			boolean		
writebackgroundpredictions = FALSE		boolean		
responsecurvesexponent = FALSE			boolean		
linear = TRUE				l	boolean		
quadratic = TRUE			q	boolean		
product = TRUE				p	boolean		
threshold = TRUE				boolean		
hinge = TRUE				h	boolean		
addsamplestobackground = TRUE		d	boolean		
addallsamplestobackground = FALSE		boolean		
autorun = FALSE				a	boolean		
writeplotdata = FALSE				boolean		
fadebyclamping = FALSE				boolean		
extrapolate = TRUE				boolean		
visible = TRUE				z	boolean		
autofeature = TRUE			A	boolean		
doclamp = TRUE					boolean		
outputgrids = TRUE			x	boolean		
plots = TRUE					boolean		
appendtoresultsfile = FALSE			boolean		
maximumiterations = 500			m	integer		
convergencethreshold = 1.00E-05		c	double		
adjustsampleradius = 0				integer		
threads = 1					integer		
lq2lqptthreshold = 80				integer		
l2lqthreshold = 10				integer		
hingethreshold = 15				integer		
beta_threshold = -1				double		
beta_categorical = -1				double		
beta_lqp = -1					double		
beta_hinge = -1					double		
logfile	= "maxent.log"				string		
cache = TRUE					boolean		
defaultprevalence = 0.5				double		
applythresholdrule = ""				string	
togglelayertype = ""			t 	string	
togglespeciesselected = ""		E	string	
togglelayerselected = ""		N	string	
verbose = FALSE				v	boolean		
allowpartialdata = FALSE			boolean		
prefixes = TRUE					boolean		
nodata = -9999				n	integer	


###### BRT ######

data =		# data.frame
gbm.x =		# predictor variables
gbm.y =		# response variable
offset = NULL
fold.vector = NULL			a fold vector to be read in for cross validation with offsets
tree.complexity = 1			sets the complexity of individual trees
learning.rate = 0.01			sets the weight applied to individual trees
bag.fraction = 0.75			sets the proportion of observations used in selecting variables
site.weights = rep(1, nrow(data))	allows varying weighting for sites
var.monotone = rep(0, length(gbm.x))	restricts responses to individual predictors to monotone
n.folds = 10	number of folds
prev.stratify = TRUE			prevalence stratify the folds - only for presence/absence data
family = "bernoulli"			family - bernoulli (=binomial), poisson, laplace or gaussian
n.trees = 50				number of initial trees to fit
step.size = n.trees			numbers of trees to add at each cycle
max.trees = 10000			max number of trees to fit before stopping
tolerance.method = "auto"		method to use in deciding to stop - "fixed" or "auto"
tolerance = 0.001			tolerance value to use - if method == fixed is absolute, if auto is multiplier * total mean deviance
keep.data = FALSE		Logical. keep raw data in final model
plot.main = TRUE		Logical. plot hold-out deviance curve
plot.folds = FALSE		Logical. plot the individual folds as well
verbose = TRUE			Logical. control amount of screen reporting
silent = FALSE			Logical. to allow running with no output for simplifying model)
keep.fold.models = FALSE 	Logical. keep the fold models from cross valiation
keep.fold.vector = FALSE	Logical. allows the vector defining fold membership to be kept
keep.fold.fit = FALSE		Logical. allows the predicted values for observations from cross-validation to be kept


###### DISTANCE PRESENCE ONLY ###### 
###### GEOGRAPHIC DISTANCE ######

p = 		#two column matrix, data.frame or SpatialPoints* object
lonlat = TRUE


###### CONVEXHULLS ######

p = 		# two column matrix, data.frame or SpatialPoints* object
n = 1


###### CIRCLES ######

p = 		# two column matrix, data.frame or SpatialPoints* object
lonlat = TRUE
d =		# radius of each circle in meters
n = 360		# vertices in the circle
r = 6378137	# radius of the earth


###### DISTANCE PRESENCE / ABSENCE ######
###### GEOIDW ######

# library(gstat)

p =  		# two column matrix, data.frame or SpatialPoints* object
a = 		# same class as 'p'


###### VORONOI ######

# library(deldir)

p =  		# two column matrix, data.frame or SpatialPoints* object
a = 		# same class as 'p'


###### PROJECTIONs ######